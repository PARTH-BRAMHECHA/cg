#include <GL/glut.h>
#include <GL/gl.h>
#include<stdio.h>

typedef struct pixel
{
    float r, g, b;
}pixel;
pixel f_clr, b_clr;

void dda(float x1, float y1, float x2, float y2) {
    double dx = (x2 - x1);
    double dy = (y2 - y1);
    double steps;
    float xInc, yInc, x = x1, y = y1;

    steps = (abs(dx) > abs(dy)) ? (abs(dx)) : (abs(dy));
    xInc = dx / (float)steps;
    yInc = dy / (float)steps;
    glBegin(GL_POINTS);
    glVertex2d(x, y);
    for (int i = 0; i < steps; i++) {
        x += xInc;
        y += yInc;
        glVertex2d(x, y);
    }
    glEnd();
}

void boundary_fill(int x, int y)
{
    pixel c;
    glReadPixels(x, y, 1.0, 1.0, GL_RGB, GL_FLOAT, &c);
    if ((c.r != b_clr.r || c.g != b_clr.g || c.b != b_clr.b) && (c.r != f_clr.r || c.g != f_clr.g || c.b != f_clr.b))
    {
        glBegin(GL_POINTS);
        glColor3f(f_clr.r, f_clr.g, f_clr.b);
        glVertex2i(x, y);
        glEnd();
        glFlush();
        boundary_fill(x - 1, y);
        boundary_fill(x + 1, y);
        boundary_fill(x, y - 1);
        boundary_fill(x, y + 1);
    }
    glFlush();
}


void square() {

    dda(100, 100, 100, -100);
    dda(-100, 100, -100, -100);
    dda(100, 100, -100, 100);
    dda(100, -100, -100, -100);
}

void render() {
    int xmax, ymax, i;
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 0.0, 0.0);
    gluOrtho2D(0, 500, 0, 500);
    dda(100, 400, 400, 400);
    dda(100, 450, 400, 450);
    dda(100, 400, 100, 450);
    dda(400, 400, 400, 450);
    /*for(i=1;i<=4;i++)
    {
        dda(100+i*60,400,100+i*60,450);
    }*/
    //coloring color palette
    f_clr.r = 1.0f;
    f_clr.g = 0.0f;
    f_clr.b = 0.0f;
    boundary_fill(130, 425);

    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("seedfill");
    glutDisplayFunc(render);
    glutMainLoop();
    return 0;
}

------------------------------------------------------------------------------------------------------------------

#include <GL/glut.h>

void plot(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void plotFill(int x, int y, float* fill_col) {
    glColor3f(fill_col[0], fill_col[1], fill_col[2]);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void bres(int x0, int y0, int x1, int y1) {
    int dx = abs(x1 - x0), dy = abs(y1 - y0);
    int p = 2 * dy - dx;
    int twoDy = 2 * dy, twoDyDx = 2 * (dy - dx);
    int x, y, xEnd;

    // Determine how to increment the x and y coordinates based on the direction of the line
    int xStep = x0 < x1 ? 1 : -1;
    int yStep = y0 < y1 ? 1 : -1;

    x = x0;
    y = y0;
    xEnd = x1;

    plot(x, y);

    if (dx > dy) { // Slope is less than 1
        while (x != xEnd) {
            x += xStep;
            if (p < 0) {
                p += twoDy;
            }
            else {
                y += yStep;
                p += twoDyDx;
            }
            plot(x, y);
        }
    }
    else { // Slope is greater than 1
        // Swap roles of x and y
        p = 2 * dx - dy;
        twoDy = 2 * dx;
        twoDyDx = 2 * (dx - dy);
        while (y != y1) {
            y += yStep;
            if (p < 0) {
                p += twoDy;
            }
            else {
                x += xStep;
                p += twoDyDx;
            }
            plot(x, y);
        }
    }
    glFlush(); // Ensure drawing commands are finalized
}

void init() {
    glClearColor(1, 1, 1, 1); // Set background color to white
    glClear(GL_COLOR_BUFFER_BIT); // Clear the buffer to preset values
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 500, 0, 500); // Set the coordinate system
}

void bFill(int x, int y, float* fill, float* bck) {
    float current[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, current);
    if ((current[0] != fill[0] || current[1] != fill[1] || current[2] != fill[2]) && (current[0] != bck[0] || current[1] != bck[1] || current[2] != bck[2])) {
        plotFill(x, y, fill);
        bFill(x + 1, y, fill, bck);
        bFill(x, y + 1, fill, bck);
        bFill(x - 1, y, fill, bck);
        bFill(x, y - 1, fill, bck);
    }
    glFlush();
}

void draw1() {
    glColor3f(1, 0, 1);
    glClear(GL_COLOR_BUFFER_BIT);

    bres(100, 200, 400, 200);
    bres(400, 200, 400, 400);
    bres(400, 400, 100, 400);
    bres(100, 400, 100, 200);

    bres(80, 180, 200, 180);
    bres(300, 180, 420, 180);
    bres(200, 180, 150, 140);
    bres(300, 180, 350, 140);
    bres(150, 140, 350, 140);



    bres(80, 180, 80, 420);
    bres(80, 420, 420, 420);
    bres(420, 420, 420, 180);


    float fill[3] = { 1,0,1 };
    float bcol[3] = { 1,0,0 };
    bFill(250, 160, fill, bcol);
}

void draw2() {
    glColor3f(0, 0, 1);
    glClear(GL_COLOR_BUFFER_BIT);
    bres(100, 200, 170, 270);
    bres(170, 270, 240, 200);
    bres(100, 200, 240, 200);


    float fill[3] = { 0,0,1 };
    float bcol[3] = { 1,0,0 };
    bFill(150, 220, fill, bcol);
}

void draw3() {
    glColor3f(0, 0, 1);
    glClear(GL_COLOR_BUFFER_BIT);
    bres(240, 200, 320, 300);
    bres(320, 300, 400, 200);
    bres(240, 200, 400, 200);
    float fill[3] = { 0,0,1 };
    float bcol[3] = { 1,0,0 };
    bFill(350, 220, fill, bcol);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT); // Clear the buffer once before all drawing operations
    draw1(); // First draw operation
    draw2(); // Second draw operation
    draw3(); // Third draw operation
    glFlush(); // Ensure all previous OpenGL commands are completed
}


int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham's Algorithm Example");
    init();
    glutDisplayFunc(draw2);
    glutMainLoop();
    return 0;
}